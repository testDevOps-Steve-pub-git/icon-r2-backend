'use strict'

const PdfPrinter = require('pdfmake/src/printer')
const errorService = require(`${__base}/server/services/error-service`)

// Initalize PDFPrinter
let printer

/**
 *  createPrinter() - Implements the pdf printer from pdfmake explicitly
 *
 *  This function will use the input font which has been previously been
 *  checked against a list of allowed fonts. The printer will then be created
 *  using the specific font and returned to generatePdf().
 *
 *  @return {Object}              -PDF Printer to be used to create the PDF document
 */
function createPrinter () {
  const fonts = {
    OpenSans: {
      normal: `${__base}/server/models/fonts/OpenSans-Regular.ttf`,
      bold: `${__base}/server/models/fonts/OpenSans-Bold.ttf`,
      italics: `${__base}/server/models/fonts/OpenSans-Italic.ttf`,
      bolditalics: `${__base}/server/models/fonts/OpenSans-BoldItalic.ttf`
    },
    Roboto: {
      normal: `${__base}/server/models/fonts/Roboto-Regular.ttf`,
      bold: `${__base}/server/models/fonts/Roboto-Bold.ttf`,
      italics: `${__base}/server/models/fonts/Roboto-Italic.ttf`,
      bolditalics: `${__base}/server/models/fonts/Roboto-BoldItalic.ttf`
    }
  }
  return new PdfPrinter(fonts)
}

/**
 *  generatePdf() - Used to generate a PDF in backend from a request in frontend
 *
 *  Function used by pdf generation router to allow creation of the PDF
 *
 *  @param  {Object}  docDefinition     -JSON object representing the content to be generated on the PDF
 *  @return {Object}                    -JSON object representing the PDF generated by pdfmake
 */
function generatePdf (docDefinition) {
  // Create printer using input font name
  printer = createPrinter()
  // Attempt to create the pdf from input content
  try {
    const pdf = printer.createPdfKitDocument(docDefinition)
    return pdf
  } catch (err) {
    // Throw error if there is a problem generating the PDF
    throw errorService.IconError(err)
  }
}

// Public Functions
module.exports = {
  generatePdf: generatePdf
}
